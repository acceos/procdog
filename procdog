#!/usr/bin/env python

r'''
A simple tool to start, stop, and check status of a process. Intended to be an
extremely simple alternative to full-featured tools like upstart or monit, more
suitable for use in build systems, test harnesses, etc.

Author: jlevy
'''

from __future__ import print_function
import socket, sys, os, time, shlex
from threading import Thread
from argparse import ArgumentParser
# The subprocess module has known threading issues, so prefer subprocess32.
try:
  import subprocess32 as subprocess
except ImportError:
  import subprocess

NAME = "procdog"
VERSION = "0.0.2"
DESCRIPTION = "procdog: Lightweight command-line process control"

SOCKET_PATH_PAT = "/var/tmp/" + NAME + ".%s.sock"

CMD_STATUS = "status"
CMD_STOP = "stop"

RESP_STOPPED = "stopped"
RESP_RUNNING = "running"
RESP_KILLED = "killed"
RESP_EXITED = "exited"
RESP_INVALID = "invalid"
RESP_ERROR = "error"

EOM = "\n"

SOCKET_TIMEOUT = 3

DEBUG = False

def _debug(msg):
  global DEBUG
  if DEBUG:
    print("%s: debug: %s" % (NAME, msg), file=sys.stderr)

def _die(msg, code=1):
  print("%s: error: %s" % (NAME, msg), file=sys.stderr)
  sys.exit(code)


class StateException(Exception):
    pass
class NotRunningException(StateException):
    pass
class AlreadyRunningException(StateException):
    pass
class OtherException(StateException):
    pass


def _rm_socket_path(path, silent=False):
  if silent:
    try:
      os.unlink(path)
    except:
      pass
  else:
    try:
      os.unlink(path)
    except OSError:
      if os.path.exists(path):
        raise

def _recv_msg(sock):
  '''Receive a (short) newline-delimited command. Trims whitespace.'''
  data = ""
  while True:
    more_data = sock.recv(1024)
    data += more_data
    if not more_data or more_data.find(EOM) >= 0:
      break
  return data.split(EOM)[0].strip()

def _listen(socket_path, handler):
  '''Listen on Unix domain socket, calling handler() on the received commands and returning
     the results.'''

  sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
  sock.bind(socket_path)
  sock.listen(16)
  _debug("monitor: listening on %s" % socket_path)

  while True:
    connection, client_address = sock.accept()
    _debug("monitor: listen accept")
    try:
      cmd = _recv_msg(connection)
      _debug("monitor: received command '%s'" % cmd)
      response = handler(cmd)
      connection.sendall(response + EOM)
    finally:
      connection.close()

class _ListenThread(Thread):
  def __init__(self, socket_path, handler):
    Thread.__init__(self)
    self.socket_path = socket_path
    self.handler = handler
    # Do not prevent process termination on shutdown.
    self.daemon = True

  def run(self):
    _listen(self.socket_path, self.handler)

def _resp_str(code, pid=None, returncode=None, error=None):
  if error:
    return "%s: %s" % (RESP_ERROR, error)
  out = [code]
  if pid is not None:
    out.append("pid=%s" % pid)
  if returncode is not None:
    out.append("code=%s" % returncode)
  return ", ".join(out)

def _resp_parse(str):
  if str.startswith(RESP_ERROR):
    return str.split(": ")
  else:
    return str.split(", ")

def _handle_command(popen, cmd):
  '''Handle the given command and return a result, using the given popen to get info
     about the process.'''
  try:
    # Treat an empty command like a status command for convenience. This way you can cat the
    # socket and see status.
    if cmd == "" or cmd == CMD_STATUS:
      if popen.poll() is None:
        resp = _resp_str(RESP_RUNNING, pid=popen.pid)
      else:
        resp = _resp_str(RESP_EXITED, returncode=popen.returncode)
    elif cmd == CMD_STOP:
      if popen.poll() is None:
          popen.terminate()
          popen.wait()
          resp = _resp_str(RESP_KILLED)
      else:
          resp = _resp_str(RESP_EXITED, returncode=popen.returncode)
    else:
      resp = _resp_str(RESP_INVALID)
  except (OSError, IOError) as e:
    _debug("exception handling command '%s': %s" % (cmd, e))
    resp = _resp_str(RESP_ERROR, error=e)

  _debug("monitor: command '%s': response '%s'" % (cmd, resp))
  return resp

def fork_and_monitor(id, shell_cmd, options=None):
  '''Fork the given shell command then start a monitor that listens and publishes health.'''

  child_pid = os.fork()

  if child_pid == 0:
    _debug("monitor: starting: %s" % shell_cmd)
    args = shlex.split(shell_cmd)
    popen = None
    error = None

    # Open file descriptors for stdin/stdout/stderr if needed.
    if options:
      write_mode = 'a' if options.append else 'w'
      fin = None
      fout = None
      ferr = None
      if options.stdin: fin = open(options.stdin, 'r')
      if options.stdout: fout = open(options.stdout, write_mode)
      if options.stderr:
        if options.stderr != options.stdout: ferr = open(options.stderr, write_mode)
        else: ferr = fout

    # Start process, tracking any immediate errors.
    try:
      popen = subprocess.Popen(args, stdin=fin, stdout=fout, stderr=ferr)
    except OSError as e:
      error = "Failed to start: %s: %s" % (e, shell_cmd)
      _debug("monitor: %s" % error)
    if popen and popen.poll() is not None:
      error = "Failure starting (code %s): %s" % (popen.poll(), shell_cmd)
      _debug("monitor: %s" % error)

    # Start listener on fresh Unix domain socket
    socket_path = SOCKET_PATH_PAT % id
    _rm_socket_path(socket_path, silent=False)

    # If there was an error starting the process, communicate that to original client.
    if popen:
      handler = lambda cmd: _handle_command(popen, cmd)
    else:
      handler = lambda cmd: _resp_str(RESP_ERROR, error=error)

    listen_thread = _ListenThread(socket_path, handler)
    listen_thread.start()

    if popen:
      exit_code = popen.wait()
      _debug("monitor: process done (code %s), exiting" % exit_code)

    time.sleep(options.linger)
    # Just for cleanliness, best effort at removing the path when we're done; though if it remains
    # there we will just remove and re-bind on next startup.
    _rm_socket_path(socket_path, silent=True)
    sys.exit(0)

  else:
    _wait_for_connect(id)


def send_command(id, cmd):
  '''Send a command to the monitor process with the given id via its control socket.'''

  sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
  sock.settimeout(SOCKET_TIMEOUT)
  try:
    sock.connect(SOCKET_PATH_PAT % id)
    _debug("client: connected")
    sock.sendall(cmd + EOM)
    data = _recv_msg(sock)
    if not data:
      # A rare race or a bug.
      raise NotRunningException("no data from monitor")
    _debug("client: %s: %s" % (cmd, data))
    return data
  except socket.error, msg:
    raise NotRunningException("socket error: %s" % msg)
  finally:
    sock.close()

def _wait_for_connect(id):
  _debug("client: wait: checking for connect...")
  timeout = time.time() + SOCKET_TIMEOUT
  while time.time() < timeout:
    try:
      status = send_command(id, CMD_STATUS)
      _debug("client: wait: connect success")
      return
    except NotRunningException:
      time.sleep(.1)
  raise OtherException("Timeout connecting to monitor")


def status(id):
  '''Return status of the process with the given id.'''
  try:
    return send_command(id, CMD_STATUS)
  except NotRunningException:
    return RESP_STOPPED

def start(id, shell_cmd, strict=False, options=None):
  '''Start a process, assigning it the given id. If strict is true, return existing process status;
     otherwise raise exception if process already is running.'''
  prev_status = status(id)
  prev_code = _resp_parse(prev_status)[0]
  if prev_code in [RESP_STOPPED, RESP_EXITED, RESP_KILLED]:
    fork_and_monitor(id, shell_cmd, options=options)
    return send_command(id, CMD_STATUS)
  else:
    if strict:
      raise AlreadyRunningException("Process already running (%s)" % prev_status)
    else:
      return prev_status

def stop(id, strict=False):
  '''Stop the command with the given id. If strict is true, raise exception if process already is stopped.'''
  try:
    return send_command(id, CMD_STOP)
  except NotRunningException as e:
    if strict:
      raise
    else:
      return RESP_STOPPED


def main():
  parser = ArgumentParser(description=DESCRIPTION)
  parser.add_argument("control_cmd", help="command", choices=["start", "stop", "status"])
  parser.add_argument("id", help="unique identifier for this process")
  parser.add_argument("--command", help="with start: full command to start process, with all arguments, in shell syntax")
  parser.add_argument("--stdin", help="with start: filename for standard input")
  parser.add_argument("--stdout", help="with start: filename for standard input")
  parser.add_argument("--stderr", help="with start: filename for standard error (may be same as --stdout)")
  parser.add_argument("--append", help="with start: append to files specified in --stdout and --stderr", action="store_true")
  parser.add_argument("--linger", help="with start: seconds for monitor to linger, preserving exit code", type=float, default=3.)
  parser.add_argument("--debug", help="enable debugging output", action="store_true")
  parser.add_argument("--strict", help="abort with error if asked to start a started process or stop a stopped one", action="store_true")
  args = parser.parse_args()

  if args.control_cmd == "start" and not args.command:
    parser.error("Must specify --comand with 'start'")
  if args.control_cmd != "start" and (args.command or args.stdin or args.stdout or args.stderr or args.append):
    parser.error("Some options may only be used with 'start'")

  global DEBUG
  DEBUG = args.debug

  try:
    if args.control_cmd == "start":
      result = start(args.id, args.command, strict=args.strict, options=args)
    elif args.control_cmd == "stop":
      result = stop(args.id, strict=args.strict)
    elif args.control_cmd == "status":
      result = status(args.id)
    print(result)
  except AlreadyRunningException as e:
    _die("process '%s' is already running" % args.id, code=2)
  except NotRunningException as e:
    _die("process '%s' is not running" % args.id, code=3)

if __name__ == '__main__':
  main()

# TODO:
# - kill -15 followed by kill -9 if no response; custom kill signals
# - proper tests, in separate file
# - more testing on Mac+Linux
